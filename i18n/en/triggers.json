{
	"triggers": {
		"header": "Execute custom actions based on {COUNT} event types",
		"header_select_trigger": "Select the trigger type to create amongst the {COUNT} available",
		"header_select_reward": "Select the channel point reward",
		"header_select_counter": "Select the counter",
		"header_select_value": "Select the value",
		"header_select_obs_scene": "Select the OBS scene",
		"header_select_obs_source": "Select the OBS source",
		"header_select_obs_input": "Select the OBS input to monitor",
		"header_select_obs_filter": "Select the OBS filter to monitor",
		"usage": "Triggers allow you to execute many sort of actions in response to many kind of events. You can create simple things like chat commands, or more complex ones like a song request system if you connected Spotify.",
		"trigger_name": "Custom name",
		"add_triggerBt": "Create a trigger",
		"testBt": "Test trigger",
		"deleteBt": "Delete trigger",
		"folder_color": "Color",
		"resyncOBSBt": "Resync OBS sources",
		"resyncOBSBt_tt": "If you changed your sources or scenes on OBS, click this to get those modifications",
		"resyncRewardsBt": "Resync rewards",
		"resyncRewardsBt_tt": "If you modified your channel point rewards, click to get those updates",
		"resyncExtensionBt": "Resync Twitch extensions",
		"resyncExtensionBt_tt": "If you added or modified the status of an extension, click to get those changes",
		"resyncmixitupBt": "Resync Mix It Up",
		"resyncmixitupBt_tt": "If you added or modified a Mix It Up command, click to get those changes",
		"delete_confirm": "Delete trigger?",
		"delete_action_confirm": "Delete action?",
		"delete_actions_confirm": "Delete all actions?",
		"reorder_tt": "Reorder",
		"noChannelPoints_tt": "You are not a Twitch affiliate or you have refused Twitchat to control this",
		"triggers_list": "Your triggers {COUNT}",
		"triggers_list_raw": "Raw list",
		"triggers_list_cat": "Categories",
		"create_folder": "Create folder",
		"create_counterBt": "Create counters",
		"trigger_queue": "Execution queue",
		"trigger_queue_info": "To make sure some triggers execute one after another, associate them to the same execution queue.",
		"trigger_queue_input_placeholder": "execution queue...",
		"trigger_queue_priority": "Priority",
		"missing_trigger": "DELETED TRIGGER",
		"missing_counter": "DELETED COUNTER",
		"missing_reward": "DELETED REWARD",
		"missing_reward_scope": "CANNOT LOAD REWARD INFO",
		"random_placeholder": "Random value placeholder {NAME}",
		"http_placeholder": "HTTP placeholder {NAME}",
		"raffle_placeholder": "Winning raffle entry",
		"screenshot_placeholder": "OBS Screenshot",
		"premium_limit": "You created the maximum number of {MAX} triggers. Become premium to create up to {MAX_PREMIUM} triggers. Or disable / delete some triggers to create new ones.",
		"delete_folder_confirm": {
			"title": "Delete folder?",
			"desc": "Triggers inside the folder will be moved to its parent."
		},
		"logs": {
			"cmd_info": "Tip: Use {CMD} command to get execution logs",
			"title": "Trigger logs",
			"subtitle": "Get details about your triggers execution",
			"empty": "- no history -"
		},
		"music": {
			"require": "This trigger need you to connect with Spotify under the {URL}",
			"require_url": "@:params.categories.connexions section"
		},
		"obs": {
			"require": "This trigger need you to {URL}",
			"require_url": "connect with OBS"
		},
		"count": {
			"require": "These triggers need you to first {URL_COUNTERS} or  {URL_VALUES}",
			"require_counters": "create counters",
			"require_values": "create values"
		},
		"rewards": {
			"require": "This trigger needs to {URL}",
			"require_url": "list your channel point rewards",
			"all_rewards": "Any rewards"
		},
		"schedule": {
			"conflict": "A schedule with this name already exists",
			"add_dateBt": "Add date",
			"param_daily": "Daily",
			"param_monthly": "Monthly",
			"param_yearly": "Yearly",
			"param_action": "Schedule type",
			"param_repeatDurationCondition": "Time based repeat",
			"param_repeatDurationValue": "Execute every {VALUE}s",
			"param_repeatMessageCondition": "Message based repeat",
			"param_repeatMessageValue": "Must receive at least {VALUE} message | Must receive at least {VALUE} messages"
		},
		"condition": {
			"title": "Execution conditions",
			"createBt": "Create a condition",
			"add_tt": "Add condition",
			"group_tt": "Create a sub group and add a condition",
			"placeholder_cmd_param": "Command param {NAME}",
			"operators": {
				">": ">",
				"<": "<",
				">=": ">=",
				"<=": "<=",
				"=": "=",
				"!=": "≠",
				"contains": "Contains",
				"not_contains": "Not containing",
				"starts_with": "Starts with",
				"not_starts_with": "Not starting with",
				"ends_with": "Ends with",
				"not_ends_with": "Not ending with",
				"AND": "AND",
				"OR": "OR",
				"empty": "is empty",
				"not_empty": "not empty",
				"longer_than": "longer than",
				"shorter_than": "shorter than"
			},
			"custom_value": "Custom value..."
		},
		"slash_cmd": {
			"param_cmd": "Command",
			"param_cmd_placeholder": "/command...",
			"param_ctx_menu": "Add to moderation actions (right click a message)",
			"param_discord": "Add it to your Discord commands",
			"param_cmd_params": "Optional command params",
			"param_cmd_params_tt": "This allows you to extract parts of the user's message to custom placeholders for later use on any action of the trigger",
			"param_cmd_params_placeholder": "add a parameter...",
			"param_cmd_params_example": "Command usage example:",
			"param_cmd_params_example_result": "Result:",
			"param_cmd_params_type_tt": "Data type. Select \"User\" to make twitchat load user's data",
			"format_error": "Command must start with a \" / \""
		},
		"actions": {
			"common": {
				"select_action": "Select the action type to execute",
				"duplicate_tt": "Duplicate",
				"next_delay": "Delay before next step (seconds)",
				"delete": "Delete",
				"dynamic_placeholder_info": "This action allows you to create a custom placeholder that you can use on subsequent actions.",
				"action_delay": "Delay",
				"action_chat": "Send chat message",
				"action_delete": "Delete chat message",
				"action_customChat": "Custom notification",
				"action_reward": "Channel points reward",
				"action_extension": "Twitch Extension",
				"action_bingo": "Start a bingo",
				"action_bingoGrid": "Bingo grid",
				"action_chatSugg": "Chat suggestions",
				"action_raffle": "Start a raffle",
				"action_raffle_enter": "Enter raffle",
				"action_highlight": "Highlight on stream",
				"action_trigger": "Call trigger",
				"action_triggerToggle": "Toggle trigger",
				"action_obs": "Control OBS",
				"action_obs_tt": "You need to connect with OBS on the <strong>Connexions</strong> section",
				"action_tts": "Text to speech",
				"action_tts_tt": "This needs the <strong>text to speech</strong> feature to be enabled",
				"action_music": "Control Spotify",
				"action_music_tt": "You need to connect Spotify on the <strong>Connexions</strong> section",
				"action_voicemod": "Control Voicemod",
				"action_voicemod_tt": "You need to connect with Voicemod",
				"action_discord": "Discord",
				"action_discord_tt": "You need to link Twitchat with Discord",
				"action_http": "HTTP call",
				"action_ws": "Websocket message",
				"action_poll": "Start poll",
				"action_prediction": "Start prediction",
				"action_count": "Update a counter",
				"action_value": "Update a value",
				"action_random": "Random value",
				"action_stream_infos": "Set stream infos",
				"action_stream_infos_tt": "You need to allow Twitchat to update your stream info",
				"action_vibrate": "Vibrate phone",
				"custom_placeholder_example": "Use {PLACEHOLDER} keyword in any field of the actions bellow to get the placeholder's value.",
				"action_goxlr": "Control GoXLR",
				"action_goxlr_tt": "You need to connect your GoXLR",
				"action_customBadges": "Custom user badges",
				"action_customUsername": "Custom username",
				"action_heat_click": "Click a distortion",
				"action_heat_click_tt": "You first need to create a distortion to use this action",
				"action_lumia": "Control Lumia Stream",
				"action_lumia_tt": "You first need to connect with Lumia Stream",
				"action_streamerbot": "Streamer.bot action",
				"action_streamerbot_tt": "You first need to connect Twitchat with Streamer.bot to use this action",
				"action_sammi": "SAMMI action",
				"action_sammi_tt": "You first need to connect Twitchat with SAMMI to use this action",
				"action_mixitup": "Mix It Up action",
				"action_mixitup_tt": "You first need to connect Twitchat with Mix It Up to use this action",
				"action_playability": "PlayAbility action",
				"action_playability_tt": "You first need to connect Twitchat with PlayAbility to use this action"
			},
			"chat": {
				"loop": "The message starts with the actual command name, this will lead to infinite message loop!",
				"param_message": "Message to send on your chat",
				"param_reply": "Send as an answer to the original message",
				"conflict": "A command with this name already exists",
				"allowed_users": "Allowed users",
				"advanced_params": "Advanced parameters",
				"param_cmd": "Command",
				"param_cmd_alias": "Aliases",
				"param_cmd_alias_tt": "Optional alternative commands",
				"param_globalCD": "Global cooldown ({VALUE}s)",
				"param_userCD": "User cooldown ({VALUE}s)",
				"param_alertCD": "Tell users if they're cooled down",
				"commands_list": "Chat commands",
				"use_slash_cmd": "Use trigger \" @:triggers.events.SLASH_COMMAND.label \" for this kind of command",
				"reset_cooldown_tt": "Reset current cooldowns"
			},
			"delete_message": {
				"info": "Delete the chat message that started this trigger."
			},
			"discord": {
				"param_message": "Message to send to Discord",
				"param_channel": "Discord channel to send message to"
			},
			"highlight": {
				"header": "You need to configure the {LINK} to use this action.",
				"header_link": "Message highlight overlay",
				"param_visibility": "Highlight visibility",
				"param_message": "Message to display (supports HTML)"
			},
			"music": {
				"header": "This feature needs you to connect with Spotify under the {LINK}",
				"header_link": "connections section",
				"param_actions": "Action",
				"param_actions_default": "Select an action...",
				"param_track": "Track to add (name or URL)",
				"param_confirmSongRequest": "Confirmation message (optional)",
				"param_failSongRequest": "Send a message if song request failed (optional)",
				"param_limit_duration": "Limit allowed track duration",
				"param_max_duration": "Only allow tracks shorter than {VALUE}s",
				"param_playlist": "Playlist\n(name, link or ID)",
				"param_selection": "Track result to select\n(for textual searches)",
				"param_limit_perUser": "Limit number of tracks per user in the queue",
				"param_max_perUser": "Users can have {VALUE} track in the queue at max|Users can have {VALUE} track in the queue at max|Users can have {VALUE} tracks in the queue at max",
				"param_selection_options": {
					"1": "Most relevant",
					"2": "2nd most relevant",
					"3": "3rd most relevant",
					"top3": "Random track among the first 3 results",
					"top5": "Random track among the first 5 results",
					"top10": "Random track among the first 10 results",
					"top15": "Random track among the first 15 results",
					"top20": "Random track among the first 20 results",
					"top25": "Random track among the first 25 results",
					"top30": "Random track among the first 30 results",
					"top40": "Random track among the first 40 results",
					"top50": "Random track among the first 50 results"
				},
				"missing_playlist_edit_scopes":"Twitchat needs permissions to edit your playlists",
				"spotify_only": "Only works with Spotify",
				"fail_reasons": {
					"spotify_max_per_user_reached": "{USER} reached the maximum number of tracks allowed in the queue",
					"spotify_not_connected": "Twitchat is not connected with Spotify",
					"wrong_url": "The given URL isn't a valid Spotify URL",
					"max_duration": "The given track is longer than the {DURATION} maximum allowed",
					"api_queue": "Something went wrong when requesting Spotify to add the track to queue.",
					"api_playlist": "Something went wrong when requesting Spotify to add the track to playlist.",
					"no_active_device": "Start playback manually in Spotify first to enable control via Twitchat.",
					"no_result": "No track found for given search \"{SEARCH}\"."
				}
			},
			"obs": {
				"header": "This feature needs you to {LINK}",
				"header_link": "connect with OBS",
				"media_source": "If using a placeholder on the Media file path, folder navigation chars like {CMD1} and {CMD2} will be removed for security reasons.",
				"media_source_example": ": if setting this as the path {PATH1}, users won't be able to send {PATH2}",
				"param_obsAction": "Action",
				"param_sourceAction": "Action on source",
				"param_show_filter": "Filter visibility",
				"param_obs_action_sources": "Control sources & scenes",
				"param_obs_action_startstream": "Start stream",
				"param_obs_action_stopstream": "Stop stream",
				"param_obs_action_startrecord": "Start record",
				"param_obs_action_pauserecord": "Pause record",
				"param_obs_action_pauserecord_alert": "Make sure your OBS recording settings allow for pause (ex: .mkv format at high quality)",
				"param_obs_action_resumerecord": "Resume record",
				"param_obs_action_stoprecord": "Stop record",
				"param_obs_action_emitevent": "Emit browser event",
				"param_obs_action_startvirtualcam": "Start virtual cam",
				"param_obs_action_stopvirtualcam": "Stop virtual cam",
				"param_obs_action_createchapter": "Add chapter marker to current record",
				"param_obs_action_hotkey": "Trigger hotkey action",
				"param_obs_action_screenshot": "Source screenshot",
				"param_record_chapter_name":"Chapter name",
				"param_record_hotkey_name":"Action",
				"param_screenImgFormat_conf": "Image format",
				"param_screenImgSize_toggle_conf": "Custom image size",
				"param_screenImgSize_width_conf": "Width: {VALUE}px",
				"param_screenImgSize_height_conf": "Height: {VALUE}px",
				"param_screenImgSize_modeSave_conf": "Save to disk",
				"param_screenImgSize_modeGet_conf": "Get data",
				"param_screenImgSavePath_conf": "File path to save the image to",
				"param_screenImgSavePH_conf": "Placeholder to save Base64 data to",
				"param_browser_info": "This feature is for developpers. It allows to emit a javascript event on all browsser sources to send them data.",
				"param_browser_usage": "Add this to your browser source to receive the data:",
				"param_browserEvent_name": "Event name",
				"param_browserEvent_param": "Event parameter",
				"param_source": "OBS Element",
				"param_source_splitter_scenes": "━━━━━━ Scenes ━━━━━━",
				"param_source_splitter_sources": "━━━━━━ Sources ━━━━━━",
				"param_source_splitter_inputs": "━━━━━━ Inputs ━━━━━━",
				"param_filter": "Source filter",
				"param_filter_none": "- none -",
				"param_text": "Text to write on source",
				"param_url": "Browser URL",
				"param_css": "Custom CSS",
				"param_media": "Media file (optionel)",
				"param_media_img": "Image file",
				"param_mediaEvent": "Wait for media playback to complete\n(trigger's execution will be paused until media playing completes)",
				"param_x": "Position X (pixels)",
				"param_y": "Position Y (pixels)",
				"param_width": "Width (pixels)",
				"param_height": "Height (pixels)",
				"param_angle": "Rotation angle\n(0 -> 360)",
				"param_relative_transform_move": "Relative move (add to current position)",
				"param_relative_transform_resize": "Relative resize (add to current sizes)",
				"param_relative_transform_rotate": "Relative rotation (add to current rotation)",
				"param_transform_animate": "Animate change",
				"param_transform_animate_easing": "Animation type",
				"param_transform_animate_easing_list": {
					"linear.none": "Linear",
					"sine.out": "Slowdown",
					"sine.in": "Accelerate",
					"sine.inOut": "Accelerate & Slowdown",
					"back.out": "Back (out)",
					"back.in": "Back (in)",
					"back.inOut": "Back (in out)",
					"bounce.out": "Bounce (out)",
					"bounce.in": "Bounce (in)",
					"bounce.inOut": "Bounce (in out)",
					"elastic.out": "Elastic (out)",
					"elastic.in": "Elastic (in)",
					"elastic.inOut": "Elastic (in out)"
				},
				"param_transform_animate_duration": "Animation duration ({VALUE} milliseconds)",
				"param_action_show": "Show source",
				"param_action_hide": "Hide source",
				"param_action_toggle_visibility": "Toggle source visibility",
				"param_action_show_filter": "Enable filter",
				"param_action_hide_filter": "Disable filter",
				"param_action_toggle_filter": "Toggle filter state",
				"param_action_scene_switch": "Switch to scene",
				"param_action_mute": "Mute source",
				"param_action_unmute": "Unmute source",
				"param_action_replay": "Restart playback",
				"param_action_stop": "Stop playback",
				"param_action_next": "Next playlist item",
				"param_action_prev": "Previous playlist item",
				"param_action_move": "Move source",
				"param_action_rotate": "Rotate source",
				"param_action_resize": "Resize source"
			},
			"trigger": {
				"beta": "This is a beta feature!{BR} If you experience any unexpected behavior with it please {LINK}",
				"beta_link": "let me know on Discord",
				"warning_title": "Important warning",
				"warning": "Placeholders may not be available on the selected trigger.",
				"warning_example": ": If you execute a <strong>Chat command</strong> trigger from a <strong>Scheduled action</strong> trigger, the {'{'}USER{'}'} and {'{'}MESSAGE{'}'} placeholders won't be available as it won't be executed from an actual chat message.",
				"select": "Select which trigger to execute",
				"selected": "Trigger to execute",
				"loop": "Dependency loop detected",
				"loop_delails": "This may make twitchat unstable."
			},
			"triggerToggle": {
				"select": "Select the trigger you want to control",
				"selected": "Trigger to update",
				"action": "Action",
				"action_enable": "Enable trigger",
				"action_disable": "Disable trigger",
				"action_toggle": "Toggle trigger state"
			},
			"tts": {
				"header": "This feature needs you to enable {LINK} feature",
				"header_link": "text to speech",
				"param_message": "Message to read with text to speech",
				"param_customVoice": "Use a specific voice"
			},
			"voicemod": {
				"header": "This feature needs you to {LINK}",
				"header_link": "connect with Voicemod",
				"param_voice": "Voice effect",
				"param_sound": "Sound to play",
				"param_action": "Action",
				"param_action_voice": "Enable a filter",
				"param_action_sound": "Play a sound",
				"param_action_beepOn": "Start beep",
				"param_action_beepOff": "Stop beep"
			},
			"http_ws": {
				"url": "URL to call",
				"method": "Method",
				"topic_placeholder": "custom value...",
				"output_placeholder": "Store query result on this placeholder",
				"output_placeholder_placeholder": "placeholder...",
				"custom_body": "Custom body",
				"custom_body_placeholder": "{'{'}\n...\n{'}'}",
				"select_param": "Select parameters to send:",
				"select_param_ws": "Select parameters to add to JSON body:",
				"protocol_error": "Due to browser security restrictions, only 127.0.0.1 or localhost domains can be called with HTTP protocol. Use HTTPS for other domains.",
				"send_as_body": "Send parameters selected bellow in the body as JSON\n(otherwise they're sent as query URL)",
				"custom_headers": "Custom headers",
				"add_headerBt": "Add header",
				"need_to_connect": "This action requires you to {LINK}",
				"need_to_connect_link": "connect to a websocket server",
				"topic_description": "Custom value",
				"payload_description": "Custom JSON body",
				"extract_data": "Extract query result data to placeholders",
				"extract_data_type_text": "Text",
				"extract_data_type_json": "JSON",
				"extract_data_jsonpath": "JSON path (ex: $)",
				"extract_data_placeholder": "Placeholder name...",
				"add_placeholder_bt": "Add placeholder"
			},
			"count": {
				"value_label": "Value",
				"select_label": "Counters to update",
				"select_placeholder": "Select a counter...",
				"select_action": "Action",
				"select_action_placeholder": "Select action...",
				"action_update": "Update value",
				"action_delete": "Delete entry",
				"action_add": "Add value",
				"action_del": "Substract value",
				"action_set": "Set value",
				"user_source_title": "Select the user to update for this per-user counter: | Select the user to update for those per-user counters:",
				"user_action_title": "Select action to perform for this per-user counter: | Select action to perform for those per-user counters:",
				"user_source_sender": "User calling the trigger",
				"user_source_everyone": "All entries",
				"user_source_chatters": "All users on chat",
				"user_source_placeholder": "Placeholder {'{'}{PLACEHOLDER}{'}'}"
			},
			"value": {
				"value_label": "New value",
				"interpret_arithmetic": "Interpret arithmetic operations (AKA maths)",
				"select_label": "Values to update",
				"select_placeholder": "Select a value...",
				"param_action": "Action to perform\n(for per-user values)",
				"action_update": "Update value",
				"action_delete": "Delete entry",
				"user_source_title": "Select the user to update for this per-user Value: | Select the user to update for those per-user Values:",
				"user_action_title": "Select action to perform for this per-user Value: | Select action to perform for those per-user Values:",
				"user_source_sender": "User calling the trigger",
				"user_source_everyone": "All entries",
				"user_source_chatters": "All users on chat",
				"user_source_placeholder": "Placeholder {'{'}{PLACEHOLDER}{'}'}"
			},
			"random": {
				"min_label": "Min value (included)",
				"max_label": "Max value (included)",
				"float_label": "Allow for float numbers",
				"example": "Use {PLACEHOLDER} key in any field of the actions after this one to get the random value.",
				"number": "Number",
				"list": "List",
				"trigger": "Triggers",
				"trigger_info": "Execute a random trigger amongst the selected ones",
				"trigger_select": "Select one or more triggers",
				"trigger_skipDisabled": "Ignore disabled triggers during random selection",
				"trigger_disableAfterExec": "Disable selected trigger after executing it",
				"list_label": "Pick a random entry amongst these ones:",
				"list_entry_placeholder": "add entry...",
				"placeholder_label": "Placeholder name",
				"value": "Value",
				"value_splitter": "Entries separator\n(char that seperates entries)",
				"value_id": "Value to pick an entry from",
				"value_no_values": "It's only possible to pick a random entry from a per-user Value.\nCreate a value with \" @:values.form.value_user \" option enabled.",
				"counter": "Counter",
				"counter_id": "Counter to pick an entry from",
				"counter_no_values": "It's only possible to pick a random entry from a per-user Counter.\nCreate a counter with \" @:counters.form.value_user \" option enabled.",
				"placeholder_tuto": "Define placeholders names to which extract corresponding data:",
				"placeholder_user_id": "User ID",
				"placeholder_user_name": "User name (Twitch only)",
				"placeholder_value": "Value"
			},
			"raffle_enter": {
				"info": "The user triggering the current event will enter any currently running raffle. It will do nothing if no raffle has been created first."
			},
			"vibrate": {
				"info": "This action only works when using Twitchat on a mobile device.",
				"pattern": "Vibration pattern"
			},
			"heat": {
				"select_area": "Select one or multiple areas to be clicked to execute this trigger",
				"no_area": "You created no clickable area",
				"create_areaBt": "Create clickable areas"
			},
			"goxlr": {
				"select_button": "Select which buttons should execute that trigger in the interface bellow",
				"param_action": "Action type",
				"param_fxPreset": "FX preset to enable",
				"param_fxPreset_keep": "Keep current",
				"param_fxPreset1": "Preset 1",
				"param_fxPreset2": "Preset 2",
				"param_fxPreset3": "Preset 3",
				"param_fxPreset4": "Preset 4",
				"param_fxPreset5": "Preset 5",
				"param_fxPreset6": "Preset 6",
				"param_faderIndex": "Audio channel to update",
				"param_fader_mic": "Mic",
				"param_fader_chat": "Voice chat",
				"param_fader_music": "Music",
				"param_fader_game": "Game",
				"param_fader_console": "Console",
				"param_fader_linein": "Line In",
				"param_fader_system": "System",
				"param_fader_sample": "Sample",
				"param_faderValue": "Volume (0 => 253)",
				"param_profile": "Profile",
				"action_fx_on": "Enable FX",
				"action_fx_off": "Disable FX",
				"action_sample_play": "Play sample",
				"action_set_fader": "Set a volume",
				"action_profile": "Switch profile",
				"select_sampler": "Select the sample bank and button on the interface bellow"
			},
			"customBadge": {
				"param_user": "Select user to edit tags of",
				"no_badge": "drag & drop badge here",
				"badge_to_add": "Badges to add",
				"badge_to_del": "Badges to remove",
				"param_add_badgeBt": "Create badge",
				"user_source_sender": "User calling the trigger",
				"user_source_everyone": "All existing custom badge entries",
				"user_source_chatters": "All users on chat"
			},
			"customUsername": {
				"param_user": "Select user to edit username of",
				"param_username": "New username\n(leave empty to reset)",
				"user_source_sender": "User calling the trigger",
				"user_source_everyone": "All existing custom username entries",
				"user_source_chatters": "All users on chat"
			},
			"adBreak": {
				"param_delay": "Delay before ad break starts"
			},
			"customChat": {
				"param_icon": "Icon",
				"param_message": "Message",
				"param_error": "Display as an error",
				"param_user": "Username",
				"param_user_color": "Username color",
				"param_style": "Message style",
				"param_style_message": "Message",
				"param_style_highlight": "Highlight",
				"param_style_error": "Error",
				"param_highlight_color": "Highlight color",
				"param_col": "Chat column to show the message to",
				"param_col_all": "All",
				"param_action_type": "Action type",
				"param_action_type_trigger": "Execute a trigger",
				"param_action_type_url": "Open a page",
				"param_action_type_chat": "Send chat message",
				"param_action_url": "URL",
				"param_action_trigger": "Trigger",
				"param_action_message": "Message (you can use Twitch and Twitchat commands)",
				"param_action_label": "Button label",
				"param_action_icon": "Button icon",
				"param_action_theme": "Button style",
				"param_action_theme_default": "Default",
				"param_action_theme_primary": "Green",
				"param_action_theme_secondary": "Orange",
				"param_action_theme_alert": "Red",
				"param_action_theme_light": "White",
				"add_actionBt": "Add an action"
			},
			"heat_click": {
				"param_overlay": "Overlay to send the click to",
				"param_forward": "Forward current click data to overlay",
				"param_x": "X coordinate (in %: 0 => 100)",
				"param_y": "Y coordinate (in %: 0 => 100)",
				"param_ctrl": "Ctrl key pressed",
				"param_shift": "Shift key pressed",
				"param_alt": "Alt key pressed"
			},
			"reward": {
				"param_action": "Action to perform",
				"param_action_toggle": "Enable/Disable a reward",
				"param_action_edit": "Update a reward",
				"param_action_create": "Create a reward",
				"param_action_delete": "Delete a reward",
				"param_action_refund": "Refund redeem",
				"param_reward": "Reward to change",
				"param_state": "New reward state",
				"param_state_enable": "Enable",
				"param_state_disable": "Disable",
				"param_state_toggle": "Toggle state",
				"no_manageable_reward": "You have no manageable reward. Please first create a reward from Twitchat or transfer any of your existing rewards to Twitchat.\nClick the {ICON} button at the bottom left."
			},
			"extension": {
				"param_id": "Extension to update",
				"param_enable": "New extension state",
				"param_slot": "New extension location"
			},
			"lumia": {
				"param_color": "Lights color",
				"param_brightness": "Brightness",
				"param_duration": "Duration to keep color for",
				"param_transition": "Transition duration"
			},
			"bingoGrid": {
				"param_grid":"Grid",
				"param_x":"Cell X position",
				"param_y":"Cell Y position",
				"param_name":"Text",
				"param_action":"Action",
				"param_action_tick":"Tick cell",
				"param_action_untick":"Untick cell",
				"param_action_toggle":"toggle cell",
				"param_action_tick_all":"Tick all cells",
				"param_action_untick_all":"Untick all cells",
				"param_action_rename":"Rename a cell",
				"param_action_add_cell":"Add a cell",
				"param_action_shuffle":"Shuffle grid",
				"param_cell_coordinates":"Cell coordinates",
				"param_cell_id":"Specific cell",
				"param_cell":"Cell",
				"no_grid":"You must first create a bingo grid"
			},
			"streamerbot":{
				"param_action":"Action to execute",
				"need_to_connect": "This action requires you to {LINK}",
				"need_to_connect_link": "connect with Streamer.bot",
				"add_arg_bt":"Add parameter"
			},
			"sammi":{
				"param_buttonId":"Button ID to trigger",
				"need_to_connect": "This action requires you to {LINK}",
				"need_to_connect_link": "connect with SAMMI"
			},
			"mixitup":{
				"param_commandId":"Command to trigger",
				"need_to_connect": "This action requires you to {LINK}",
				"need_to_connect_link": "connect with Mix It Up",
				"add_arg_bt":"Add parameter"
			},
			"playability":{
				"need_to_connect": "This action requires you to {LINK}",
				"need_to_connect_link": "connect with PlayAbility",
				"add_output_bt": "Add action",
				"output_press":"Press button",
				"output_release":"Release button",
				"output_press_release":"Press/Release button"
			}
		},
		"categories": {
			"global": "Chat - Channel points",
			"user": "User event",
			"subits": "Sub & bits & Power UPs",
			"mod": "Moderation actions",
			"twitchat": "Twitchat",
			"hypetrain": "Hype train",
			"games": "Games",
			"music": "Spotify",
			"timer": "Temporal events",
			"obs": "OBS",
			"misc": "Miscellaneous",
			"count_and_values": "Counters & Values",
			"goxlr": "GoXLR",
			"kofi": "Ko-fi",
			"streamlabs": "Streamlabs",
			"streamelements": "Streamelements",
			"tipeee": "Tipeee",
			"youtube": "YouTube",
			"tiltify": "Titlitfy",
			"patreon": "Patreon",
			"tiktok": "TikTok",
			"twitch_charity": "Twitch Charity"
		},
		"placeholders": {
			"trigger_name": "Current trigger name",
			"trigger_id": "Current trigger ID",
			"user": "User name",
			"user_customName": "User name custom",
			"user_id": "User ID",
			"user_color": "User color",
			"user_badges": "User badges as JSON",
			"user_custom_badges": "Custom user badge IDs",
			"my_user": "My user name",
			"my_user_id": "My user ID",
			"user_avatar": "User avatar URL",
			"user_url": "User profile URL",
			"user_list_name": "User names",
			"user_list_id": "User IDs",
			"chatter": "Chatter name",
			"message": "Message content",
			"message_json": "Message content as JSON",
			"message_html": "Message content as HTML",
			"pinned_by": "User who pinned the mesage",
			"pinned_by_id": "ID of the user who pinned the mesage",
			"poll_title": "Poll title",
			"poll_win": "Winning choice title",
			"prediction_title": "Prediction title",
			"prediction_win": "Winning choice title",
			"prediction_points": "Total channel points bet",
			"prediction_users": "Total users that participated",
			"prediction_users_win": "Users that voted for winning outcome",
			"followage": "Following date",
			"followage_ms": "Following date in milliseconds",
			"winner": "Winner name",
			"bingo_number": "Number to guess",
			"bingo_emote": "Emote to guess",
			"bingo_custom": "Custom text to guess",
			"bingo_generic": "Value to guess (number, emote code or text)",
			"sub_tier": "Sub tier: prime, 1, 2 or 3",
			"subgift_tier": "Sub tier: 1, 2 or 3",
			"sub_message": "Message of the user",
			"sub_months_total": "Total months subscribed (might be -1 in some cases)",
			"sub_months_prepaid": "Prepaid months",
			"sub_months_streak": "Streak months",
			"sub_gifter": "Sub gifter user name",
			"sub_gifter_customName": "Sub gifter custom user name",
			"sub_gift_recipient": "Recipients user names",
			"sub_gift_recipient_id": "Recipients user IDs",
			"sub_gift_count": "Subgifts count",
			"sub_resub": "\"true\" if it's a resub",
			"sub_prime_upgrade": "\"true\" if it's a prime to sub conversion",
			"sub_gift_upgrade": "\"true\" if it's a gift to sub conversion",
			"sub_gift_upgrade_user_id": "ID of the user that offered the  upgraded sub",
			"sub_gift_upgrade_user_name": "Name of the user that offered the  upgraded sub",
			"bits": "Number of bits",
			"cheer_pin": "Is it a pinned cheer? (true/false)",
			"cheer_pinLevel": "Pin level (0 -> 6)",
			"cheer_pinDuration": "Pin duration in milliseconds",
			"my_stream_title": "My stream title",
			"my_stream_category": "My stream category",
			"my_stream_duration": "My stream duration",
			"my_stream_duration_ms": "My stream duration in milliseconds",
			"my_stream_live": "Is my stream live?",
			"stream_title": "Stream title",
			"stream_category": "Stream category",
			"stream_viewers": "Viewers count",
			"stream_duration": "Stream duration in milliseconds",
			"stream_live": "\"true\" if user was live when raiding",
			"viewers": "Viewers count",
			"reward_title": "Reward name",
			"reward_description": "Reward description",
			"reward_cost": "Reward cost",
			"reward_message": "User message if any",
			"track_artist": "Current track artist name",
			"track_title": "Current track's title",
			"track_album": "Current track's album name",
			"track_cover": "Current track's cover",
			"track_url": "Current track URL",
			"track_added_artist": "Added track artist name",
			"track_added_title": "Added track's title",
			"track_added_album": "Added track's album name",
			"track_added_cover": "Added track's cover",
			"track_added_url": "Added track URL",
			"track_added_fail": "Add to queue fail reason",
			"track_added_fail_code": "Add to queue fail code",
			"track_search_query": "Search query",
			"track_added_by": "Name of the user who requested to add the track",
			"track_added_by_id": "ID of the user that requested to add the track",
			"playlist_title": "Current playlist title",
			"playlist_url": "Current playlist URL",
			"playlist_cover": "Current playlist cover",
			"spotify_is_playing": "Is spotify currently playing?",
			"train_level": "Current level",
			"train_percent": "Current level progression (0 -> 100)",
			"train_end_level": "Level reached",
			"train_end_percent": "Percent reached",
			"voicemod_voice": "Voice's ID",
			"voicemod_voice_name": "Voice's name",
			"timeout": "Timeout duration in seconds",
			"start_date": "Formated start date",
			"timer_duration": "Formated timer's final duration",
			"timer_duration_ms": "Timer's final duration in milliseconds",
			"countdown_end_date": "Formated end date",
			"challenge_title": "Challenge title",
			"challenge_description": "Challenge description",
			"challenge_goal": "Challenge goal",
			"challenge_current": "Challenge current progress",
			"challenge_contribution": "User contribution",
			"challenge_contribution_total": "User total contribution",
			"shoutout_in": "User that gave you a shoutout",
			"shoutout_out": "User you gave a shoutout to",
			"counter_name": "Name of the counter",
			"counter_value": "New counter's value",
			"counter_update": "Value added",
			"counter_update_abs": "Value added (absolute value)",
			"counter_username": "User name (for user specific counters)",
			"counter_userid": "User ID (for user specific counters)",
			"counter_global_value": "Counter {NAME}",
			"value_global_value": "Value {NAME}",
			"value_name": "Name of the Value",
			"new_value": "New value",
			"old_value": "Old value",
			"watch_streak": "Watch streak streams count",
			"points_earned": "Watch streak channel points earned",
			"obs_scene": "Current OBS scene name",
			"viewer_count": "Viewers watching your stream",
			"obs_scene_name": "Name of the new OBS scene",
			"obs_scene_name_previous": "Name of the previous OBS scene",
			"command": "Command name",
			"hype_chat_paid": "Paid amount",
			"hype_chat_currency": "Currency used to pay (ex: USD, EUR, CHF, ...)",
			"hype_chat_duration": "Display duration in seconds",
			"hype_chat_level": "Paid level (from 0 to 9)",
			"ulule_campaign_url": "Campaign URL",
			"ulule_campaign_name": "Campaign name",
			"ulule_campaign_name_example": "My awesome project",
			"heat_anonymous": "Is click from an anonymous user?",
			"heat_coord_x": "X coordinate of the click in percent (0 => 100)",
			"heat_coord_y": "Y coordinate of the click in percent (0 => 100)",
			"heat_key_alt": "Is ALT key pressed?",
			"heat_key_shift": "Is SHIFT key pressed?",
			"heat_key_ctrl": "Is CTRL key pressed?",
			"clip_url": "Clip URL",
			"timer_value": "Timer's value in seconds",
			"timer_value_formated": "Formated timer's value",
			"countdown_value": "Countdown's remaining time in seconds",
			"countdown_value_formated": "Formated countdown's remaining time",
			"countdown_duration": "Countdown's duration in seconds",
			"countdown_duration_ms": "Countdown's duration in milliseconds",
			"countdown_duration_formated": "Formated countdown's duration",
			"goxlr_button_id": "Id of the button",
			"goxlr_fader_index": "Fader index (1 -> 4)",
			"goxlr_preset_index": "Preset index (1 -> 6)",
			"goxlr_fxenabled": "FX enabled",
			"goxlr_cough": "Cough button active",
			"goxlr_profile": "Current GoXLR profile",
			"goxlr_input_mic": "Mic input volume",
			"goxlr_input_chat": "Chat input volume",
			"goxlr_input_music": "Music input volume",
			"goxlr_input_game": "Game input volume",
			"goxlr_input_console": "Console input volume",
			"goxlr_input_linein": "Line In input volume",
			"goxlr_input_system": "System input volume",
			"goxlr_input_sample": "Sample input volume",
			"goxlr_fx_state": "FX enabled state",
			"goxlr_fx_preset": "Current FX preset index (1 -> 6)",
			"goxlr_megaphone": "Megaphone active",
			"goxlr_robot": "Robot active",
			"goxlr_hardtune": "Hardtune active",
			"goxlr_reverb": "Reverb encoder value",
			"goxlr_pitch": "Pitch encoder value",
			"goxlr_echo": "Echo encoder value",
			"goxlr_gender": "Gender encoder value",
			"goxlr_fader_1_mute": "Fader 1 muted",
			"goxlr_fader_2_mute": "Fader 2 muted",
			"goxlr_fader_3_mute": "Fader 3 muted",
			"goxlr_fader_4_mute": "Fader 4 muted",
			"ad_break_duration": "Ad break duration in seconds",
			"ad_break_user": "Name of the moderator that started the ad break (empty if automatically started)",
			"announcement_color": "Couleur de l'annonce",
			"track_add_fail_reason": "Track add fail reason",
			"now": "Date in milliseconds",
			"date":"Current date formatted",
			"time":"Current time formatted",
			"datetime":"Current date and time formatted",
			"last_sub": "Last subscriber",
			"last_sub_id": "Last subscriber ID",
			"last_subgifter": "Last subgifter",
			"last_subgifter_id": "Last subgifter ID",
			"total_sub": "Active subscriber count",
			"partner_plus_points": "Total Partner Plus points",
			"last_follow": "Last follower",
			"last_follow_id": "Last follower ID",
			"total_follow": "Total followers",
			"last_cheer": "Last cheer",
			"last_cheer_id": "Last cheer ID",
			"last_cheer_amount": "Last cheer amount",
			"qna_command": "Command to submit a Q&A entry",
			"merch_product": "Product name",
			"currency": "Currency",
			"donation_amount": "Donation amount",
			"donation_amount_formatted": "Donation amount formatted",
			"merch_amount": "Amount paid",
			"merch_amount_formatted": "Amount paid formatted",
			"subscription_amount": "Subscription amount",
			"kofi_tier": "Tier name (might be empty)",
			"kofi_product_names": "Product names (might be empty)",
			"kofi_product_ids": "Product IDs",
			"kofi_first_time_sub": "Is a first-time subscriber?",
			"kofi_public": "Is comment public?",
			"sl_tipLatest_amount": "Latest tip amount",
			"sl_tipLatest_message": "Latest tip message",
			"sl_tipLatest_username": "Latest tip username",
			"sl_tipSession": "Total amount tips received during this stream",
			"sl_tipTotal": "Total amount of tip received all time",
			"sl_tipCount": "Number of tips received all time",
			"sl_tipWeek": "Total amount of tip received this week",
			"sl_tipMonth": "Total amount of tip received this month",
			"sl_tipGoal": "Donation goal",
			"sl_tipSessionTopDonation_amount": "Top donation amount this stream",
			"sl_tipSessionTopDonation_username": "Name of top donation this stream",
			"sl_tipWeeklyTopDonation_amount": "Top donation amount this week",
			"sl_tipWeeklyTopDonation_username": "Name of top donation this week",
			"sl_tipMonthlyTopDonation_amount": "Top donation amount this month",
			"sl_tipMonthlyTopDonation_username": "Name of top donation this month",
			"sl_tipAlltimeTopDonation_amount": "Top donation amount all time",
			"sl_tipAlltimeTopDonation_username": "Name of top donation all time",
			"sl_raised": "Amount raised",
			"sl_raised_formatted": "Amount raised formatted",
			"sl_goal": "Goal amount",
			"sl_goal_formatted": "Goal amount formatted",
			"sl_campaign_id": "Campaign ID",
			"sl_campaign_title": "Campaign name",
			"sl_campaign_url": "Campaign page",
			"tipeee_resub_months": "Number of months",
			"last_sub_tier": "Last subscription tier",
			"last_subgifter_tier": "Last subgifted tier",
			"bingo_grid_id": "Grid ID",
			"bingo_grid_name": "Grid name",
			"bingo_grid_count": "Bingo count",
			"bingo_grid_cell_x": "X coordinates of the ticked cell",
			"bingo_grid_cell_y": "Y coordinates of the ticked cell",
			"bingo_grid_col": "Index of the filled column",
			"bingo_grid_row": "Index of the filled row",
			"bingo_grid_diag": "Index of the filled diagonal",
			"warn_reason": "Warning reason",
			"power_up_emote": "Gigantified emote code",
			"power_up_emote_url": "Gigantified emote URL",
			"power_up_message": "Effect: 'simmer' or 'rainbow-eclipse'",
			"superchat_tier":"Superchat tier (1 => 11)",
			"supersticker_tier":"Super stciker tier (1 => 6)",
			"supersticker_id":"Sticker's ID",
			"supersticker_url":"Sticker's URL",
			"youtube_sub_tier":"Membership level name",
			"youtube_sub_months":"Membership duration in months",
			"ws_topic":"Websocket topic",
			"ws_message":"All message data",
			"platform":"Platform that started the trigger\n(twitch, youtube, ...)",
			"tiktok_gift_count":"Number of gifts",
			"tiktok_gift_id":"ID of the gift",
			"tiktok_like_count":"Number of likes",
			"tiktok_like_total":"Total likes received during current stream",
			"tiktok_diamonds":"Diamonds received",
			"tiktok_sub_month":"Sub months",
			"playability_inputName":"Input name",
			"playability_inputType":"Input type",
			"playability_inputValue":"Input value",
			"playability_inputType_axis":"Gamepad Stick",
			"playability_inputType_button":"Gamepad Button",
			"playability_inputType_keyboard":"Keyboard key",
			"playability_inputType_mouseButton":"Mouse click",
			"playability_inputType_trigger":"Gamepad Trigger"
		},
		"events": {
			"CHAT_COMMAND": {
				"label": "Chat command",
				"description": "Actions to execute when someone uses the chat command {SUB_ITEM_NAME}"
			},
			"ANY_MESSAGE": {
				"label": "Any message",
				"description": "Actions to execute everytime a message is received on chat"
			},
			"REWARD_REDEEM": {
				"label": "Channel point reward",
				"description": "Actions to execute when the channel point reward {SUB_ITEM_NAME} is redeemed"
			},
			"COMMUNITY_CHALLENGE_PROGRESS": {
				"label": "Community challenge progress",
				"description": "Actions to execute when a user contributes to a community challenge",
				"disabled_reason": "Twitch restricted access to this information. Twitchat cannot use it anymore :("
			},
			"COMMUNITY_CHALLENGE_COMPLETE": {
				"label": "Community challenge complete",
				"description": "Actions to execute when a community challenge completes",
				"disabled_reason": "Twitch restricted access to this information. Twitchat cannot use it anymore :("
			},
			"STREAM_INFO_UPDATE": {
				"label": "Stream info update",
				"description": "Actions to execute when the stream info are updated"
			},
			"FIRST_ALL_TIME": {
				"label": "First message of a user all time",
				"description": "Actions to execute when a user sends a message for the first time on your channel"
			},
			"FIRST_TODAY": {
				"label": "First message of a user today",
				"description": "Actions to execute when a user sends a message for the first time today"
			},
			"RETURNING_USER": {
				"label": "Returning user",
				"description": "Actions to execute when a user comes back after chatting at least twice in the last 30 days. {INFO}",
				"description_info": "(ceci n'existe peut-être plus sur Twitch)",
				"disabled_reason": "Twitch restricted access to this information. Twitchat cannot use it anymore :("
			},
			"PRESENTATION": {
				"label": "User presentation",
				"description": "Actions to execute when a user sends a presentation message."
			},
			"FOLLOW": {
				"label": "Follow",
				"description": "Actions to execute when someone follows the channel"
			},
			"RAID": {
				"label": "Raid received",
				"description": "Actions to execute when someone raids the channel"
			},
			"SHOUTOUT_OUT": {
				"label": "Shoutout given",
				"description": "Actions to execute when giving a shoutout to someone"
			},
			"SHOUTOUT_IN": {
				"label": "Shoutout received",
				"description": "Actions to execute when given a shoutout on another channel"
			},
			"POLL_START": {
				"label": "Poll started",
				"description": "Actions to execute when a poll starts"
			},
			"POLL_RESULT": {
				"label": "Poll result",
				"description": "Actions to execute when a poll completes"
			},
			"PREDICTION_START": {
				"label": "Prediction started",
				"description": "Actions to execute when a prediction starts"
			},
			"PREDICTION_RESULT": {
				"label": "Prediction result",
				"description": "Actions to execute when a prediction completes"
			},
			"RAFFLE_RESULT": {
				"label": "Raffle result",
				"description": "Actions to execute when a raffle completes"
			},
			"RAFFLE_PICK_WINNER": {
				"label": "Starting to pick a raffle winner",
				"description": "Actions to execute when selection of a raffle winner starts"
			},
			"BINGO_RESULT": {
				"label": "Bingo result",
				"description": "Actions to execute when a bingo completes"
			},
			"SUB": {
				"label": "Sub",
				"description": "Actions to execute when someone subscribes to the channel"
			},
			"SUBGIFT": {
				"label": "Subgift",
				"description": "Actions to execute when someones subgifts someone else"
			},
			"CHEER": {
				"label": "Bits",
				"description": "Actions to execute when someone sends bits"
			},
			"HYPE_TRAIN_APPROACHING": {
				"label": "Hype train approach",
				"description": "Actions to execute when a hype train approaches"
			},
			"HYPE_TRAIN_START": {
				"label": "Hype train start",
				"description": "Actions to execute when a hype train starts"
			},
			"HYPE_TRAIN_PROGRESS": {
				"label": "Hype train progress",
				"description": "Actions to execute when a hype train progresses"
			},
			"HYPE_TRAIN_END": {
				"label": "Hype train end",
				"description": "Actions to execute when a hype train ends"
			},
			"HYPE_TRAIN_CANCELED": {
				"label": "Hype train canceled",
				"description": "Actions to execute when a hype train fails"
			},
			"HYPE_TRAIN_COOLDOWN": {
				"label": "Hype train cooldown",
				"description": "Actions to execute when a hype train can, be started again"
			},
			"TIMEOUT": {
				"label": "User timed out",
				"description": "Actions to execute when a user is {CMD}",
				"description_cmd": "/timeout"
			},
			"BAN": {
				"label": "User banned",
				"description": "Actions to execute when a user is {CMD}",
				"description_cmd": "/ban"
			},
			"UNBAN": {
				"label": "User unbanned",
				"description": "Actions to execute when a user is {CMD}",
				"description_cmd": "/unban"
			},
			"VIP": {
				"label": "User /vip",
				"description": "Actions to execute when a user is added to your VIPs"
			},
			"UNVIP": {
				"label": "User /unvip",
				"description": "Actions to execute when a user is removed from your VIPs {INFO}",
				"description_info": "(only works when using {CMD} command from twitchat)",
				"description_info_cmd": "/unvip"
			},
			"MOD": {
				"label": "User /mod",
				"description": "Actions to execute when a user is added to your mods"
			},
			"UNMOD": {
				"label": "User /unmod",
				"description": "Actions to execute when a user is removed from your mods {INFO}",
				"description_info": "(only works when using {CMD} command from twitchat)",
				"description_info_cmd": "/unmod"
			},
			"SHIELD_MODE_ON": {
				"label": "Shield mode enabled",
				"description": "Actions to execute when shield mode is enabled"
			},
			"SHIELD_MODE_OFF": {
				"label": "Shield mode disabled",
				"description": "Actions to execute when shield mode is disabled"
			},
			"PIN_MESSAGE": {
				"label": "Pin message",
				"description": "Actions to execute when pinning a message",
				"disabled_reason": "Twitch restricted access to this information. Twitchat cannot use it anymore :("
			},
			"UNPIN_MESSAGE": {
				"label": "Unpin message",
				"description": "Actions to execute when unpinning a message",
				"disabled_reason": "Twitch restricted access to this information. Twitchat cannot use it anymore :("
			},
			"TRACK_ADDED_TO_QUEUE": {
				"label": "Track added to queue",
				"description": "Actions to execute when a music is added to the queue"
			},
			"TRACK_ADD_TO_QUEUE_FAILED": {
				"label": "Adding track to queue failed",
				"description": "Actions to execute when a an attempt to add a track to queue failed"
			},
			"MUSIC_START": {
				"label": "Music starts playing",
				"description": "Actions to execute when a music starts playing"
			},
			"MUSIC_STOP": {
				"label": "Music stops playing",
				"description": "Actions to execute when a music stops playing"
			},
			"SCHEDULE": {
				"label": "Scheduled actions",
				"description": "Actions to execute regularly or at specific date/time"
			},
			"TIMER_START": {
				"label": "Timer start",
				"description": "Actions to execute when a timer is started {INFO}",
				"description_info": "({CMD})",
				"description_info_cmd": "/timerStart"
			},
			"TIMER_STOP": {
				"label": "Timer stop",
				"description": "Actions to execute when a timer is stoped {INFO}",
				"description_info": "({CMD})",
				"description_info_cmd": "/timerStop"
			},
			"COUNTDOWN_START": {
				"label": "Countdown start",
				"description": "Actions to execute when a countdown is started {INFO}",
				"description_info": "({CMD})",
				"description_info_cmd": "/countdown"
			},
			"COUNTDOWN_STOP": {
				"label": "Countdown stop",
				"description": "Actions to execute when a countdown completes or is stoped"
			},
			"SHOUTOUT": {
				"label": "Shoutout (Twitchat)",
				"description": "Actions to execute when doing a shoutout from Twitchat"
			},
			"EMERGENCY_MODE_START": {
				"label": "Emergency start",
				"description": "Actions to execute when enabling the emergency mode"
			},
			"EMERGENCY_MODE_STOP": {
				"label": "Emergency stop",
				"description": "Actions to execute when stopping the emergency mode"
			},
			"HIGHLIGHT_CHAT_MESSAGE": {
				"label": "Highlighted message",
				"description": "Actions to execute when requesting to highlight a message"
			},
			"CHAT_ALERT": {
				"label": "Chat alert",
				"description": "Actions to execute when the Chat Alert feature is triggered {INFO}",
				"description_info": "(Parameters => @:params.categories.features => @:params.alertMode )"
			},
			"VOICEMOD": {
				"label": "Voicemod - voice changed",
				"description": "Actions to execute when changing the voice effect on voicemod"
			},
			"VOICEMOD_SOUND": {
				"label": "Voicemod - sound effect",
				"description": "Actions to execute when playing a sound from the soundboard"
			},
			"OBS_SCENE": {
				"label": "Switch to scene",
				"description": "Actions to execute when switching to {SUB_ITEM_NAME} OBS scene"
			},
			"OBS_SOURCE_ON": {
				"label": "Source show",
				"description": "Actions to execute when showing {SUB_ITEM_NAME} OBS source"
			},
			"OBS_SOURCE_OFF": {
				"label": "Source hide",
				"description": "Actions to execute when hiding {SUB_ITEM_NAME} OBS source"
			},
			"OBS_INPUT_MUTE": {
				"label": "Audio source mute",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS audio source is muted"
			},
			"OBS_INPUT_UNMUTE": {
				"label": "Audio source unmute",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS audio source is unmuted"
			},
			"OBS_PLAYBACK_STARTED": {
				"label": "Media playback started",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source starts to play"
			},
			"OBS_PLAYBACK_ENDED": {
				"label": "Media playback ended",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source ends playing"
			},
			"OBS_PLAYBACK_PAUSED": {
				"label": "Media playback paused",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source is paused"
			},
			"OBS_PLAYBACK_RESTARTED": {
				"label": "Media playback restarted",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source is restarted"
			},
			"OBS_PLAYBACK_NEXT": {
				"label": "Media playing next item in queue",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source plays next item in queue"
			},
			"OBS_PLAYBACK_PREVIOUS": {
				"label": "Media playing previous item in queue",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS media source plays previous item in queue"
			},
			"OBS_FILTER_ON": {
				"label": "Filter enabled",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS filter is enabled"
			},
			"OBS_FILTER_OFF": {
				"label": "Filter disabled",
				"description": "Actions to execute when {SUB_ITEM_NAME} OBS filter is disabled"
			},
			"OBS_START_STREAM": {
				"label": "Start streaming (OBS)",
				"description": "Actions to execute when starting stream"
			},
			"OBS_STOP_STREAM": {
				"label": "Stop streaming (OBS)",
				"description": "Actions to execute when stoping stream"
			},
			"OBS_RECORDING_START": {
				"label": "Start recording",
				"description": "Actions to execute when starting recording"
			},
			"OBS_RECORDING_STOP": {
				"label": "Stop recording",
				"description": "Actions to execute when stoping recording"
			},
			"TWITCHAT_STARTED": {
				"label": "Twitchat ready",
				"description": "Actions to execute after Twitchat loading completes"
			},
			"STREAM_ONLINE": {
				"label": "Stream start",
				"description": "Actions to execute when stream starts {INFO}",
				"description_info": "(you might have to wait +1min before receiving that info)"
			},
			"STREAM_OFFLINE": {
				"label": "Stream stop",
				"description": "Actions to execute when stream stops {INFO}",
				"description_info": "(you might have to wait +1min before receiving that info)"
			},
			"FOLLOWED_STREAM_ONLINE": {
				"label": "Followed stream start",
				"description": "Actions to execute when one of your following starts a stream {INFO}",
				"description_info": "(you might have to wait up to 5min before receiving that info)",
				"disabled_reason": "You must allow Twitchat to list your followings"
			},
			"FOLLOWED_STREAM_OFFLINE": {
				"label": "Followed stream stop",
				"description": "Actions to execute when one of your following stops a stream {INFO}",
				"description_info": "(you might have to wait up to 5min before receiving that info)",
				"disabled_reason": "You must allow Twitchat to list your followings"
			},
			"COUNTER_EDIT": {
				"label": "A counter is modified",
				"description": "Actions to execute when value of the counter {SUB_ITEM_NAME} is modified"
			},
			"COUNTER_ADD": {
				"label": "Value added to a counter",
				"description": "Actions to execute when a value is added to the {SUB_ITEM_NAME} counter"
			},
			"COUNTER_DEL": {
				"label": "Value removed from a counter",
				"description": "Actions to execute when a value is substracted from the {SUB_ITEM_NAME} counter"
			},
			"COUNTER_MAXED": {
				"label": "Max counter value reached",
				"description": "Actions to execute when {SUB_ITEM_NAME} counter reaches its maximum value"
			},
			"COUNTER_MINED": {
				"label": "Min counter value reached",
				"description": "Actions to execute when {SUB_ITEM_NAME} counter reaches its minimum value"
			},
			"COUNTER_LOOPED": {
				"label": "Counter value looped",
				"description": "Actions to execute when the {SUB_ITEM_NAME} counter value is looped {INFO}",
				"description_info": "(if \"loop\" option is enabled and value reaches max, value will switch to min and vice versa)"
			},
			"RAID_STARTED": {
				"label": "Started a raid",
				"description": "Actions to execute when starting a raid to another channel"
			},
			"SLASH_COMMAND": {
				"label": "Custom slash /command",
				"description": "Actions to execute when using command {SUB_ITEM_NAME}.{INFO}",
				"description_info": "(Only you can use this type of command and it will never be sent on chat)"
			},
			"USER_WATCH_STREAK": {
				"label": "Watch streak",
				"description": "Actions to execute when a user share their watch streak"
			},
			"HYPE_CHAT": {
				"label": "Hype chat",
				"description": "Actions to execute when a user pays for a hype chat message"
			},
			"HEAT_CLICK": {
				"label": "Heat click",
				"description": "Actions to execute when a user clicks on your stream {INFO}",
				"description_info": "(Needs Twitch extension \"Heat\". See Heat section to install it)"
			},
			"CLIP_CREATED": {
				"label": "Clip created from Twitchat",
				"description": "Actions to execute when a clip is created from Twitchat {INFO}",
				"description_info": "(only called after using /clip command from Twitchat)"
			},
			"GOXLR_FX_ENABLED": {
				"label": "FX enabled",
				"description": "Actions to execute when GoXLR effect is enabled"
			},
			"GOXLR_FX_DISABLED": {
				"label": "FX disabled",
				"description": "Actions to execute when GoXLR effect is disabled"
			},
			"GOXLR_BUTTON_PRESSED": {
				"label": "Button pressed",
				"description": "Actions to execute when a GoXLR button is pressed"
			},
			"GOXLR_BUTTON_RELEASED": {
				"label": "Button released",
				"description": "Actions to execute when a GoXLR button is released"
			},
			"GOXLR_SAMPLE_COMPLETE": {
				"label": "Sample playback complete",
				"description": "Actions to execute when a GoXLR sample playback complete"
			},
			"GOXLR_INPUT_MUTE": {
				"label": "Fader muted",
				"description": "Actions to execute when a GoXLR fader is muted"
			},
			"GOXLR_INPUT_UNMUTE": {
				"label": "Fader unmuted",
				"description": "Actions to execute when a GoXLR fader is unmuted"
			},
			"VALUE_UPDATE": {
				"label": "Value updated",
				"description": "Actions to execute when the value {SUB_ITEM_NAME} is updated"
			},
			"ANNOUNCEMENTS": {
				"label": "/announce",
				"description": "Actions to execute when a /announce is sent on chat"
			},
			"AD_STARTED": {
				"label": "Ad break started",
				"description": "Actions to execute when a mid-roll ad starts"
			},
			"AD_APPROACHING": {
				"label": "Ad break starting soon",
				"description": "Actions to execute when a mid-roll ad will start soon"
			},
			"AD_COMPLETE": {
				"label": "Ad break completed",
				"description": "Actions to execute when a mid-roll ad completes"
			},
			"QNA_START": {
				"label": "Q&A session started",
				"description": "Actions to execute when a Q&A session starts"
			},
			"QNA_STOP": {
				"label": "Q&A session stoped",
				"description": "Actions to execute when stopping a Q&A session entries"
			},
			"QNA_DELETE": {
				"label": "Q&A session deleted",
				"description": "Actions to execute when a Q&A session is deleted"
			},
			"USER_JOIN": {
				"label": "Users join chat",
				"description": "Actions to execute when a user joined chat"
			},
			"USER_LEAVE": {
				"label": "Users leave chat",
				"description": "Actions to execute when a user left chat"
			},
			"CREDITS_COMPLETE": {
				"label": "Ending credits complete",
				"description": "Actions to execute when ending credits overlay completed rolling"
			},
			"STREAMLABS_DONATION": {
				"label": "Received a donation on Streamlabs",
				"description": "Actions to execute when receiving a donation on Streamlabs"
			},
			"STREAMLABS_MERCH": {
				"label": "Merch bought on Streamlabs",
				"description": "Actions to execute when a merch item is bought on Streamlabs"
			},
			"STREAMLABS_PATREON_PLEDGE": {
				"label": "Patreon subscriber",
				"description": "Actions to execute when someone subscribes on Patreon {INFO}",
				"description_info": "(You must link your Patreon account on Streamlabs)"
			},
			"STREAMLABS_CHARITY_TIP": {
				"label": "Received donation on a Streamlabs Charity campaign",
				"description": "Actions to execute when someone makes a donation on Streamlabs Charity campaign"
			},
			"TWITCH_CHARITY_DONATION": {
				"label": "Received donation on a Twitch Charity campaign",
				"description": "Actions to execute when someone makes a donation on Twitch Charity campaign"
			},
			"KOFI_DONATION": {
				"label": "Received a donation on Ko-fi",
				"description": "Actions to execute when receiving a donation on Ko-fi"
			},
			"KOFI_MERCH": {
				"label": "Merch bought on Ko-fi",
				"description": "Actions to execute when a merch item is bought on Ko-fi"
			},
			"KOFI_SUBSCRIPTION": {
				"label": "Someone subscribed on Ko-fi",
				"description": "Actions to execute when someone subscribes (monthly) on Ko-fi"
			},
			"KOFI_COMMISSION": {
				"label": "Someone requested a commission on Ko-fi",
				"description": "Actions to execute when somone requestes for a commission on Ko-fi"
			},
			"STREAMELEMENTS_DONATION": {
				"label": "Received a donation on Streamelements",
				"description": "Actions to execute when receiving a donation on Streamelements"
			},
			"TIPEEE_DONATION": {
				"label": "Received a donation on Tipeee",
				"description": "Actions to execute when receiving a donation on Tipeee"
			},
			"TIPEEE_SUB": {
				"label": "Received a monthly subscription on Tipeee",
				"description": "Actions to execute when someones subscribes monthly on Tipeee"
			},
			"TIPEEE_RESUB": {
				"label": "Received a resub on Tipeee",
				"description": "Actions to execute when someones resubscribes on Tipeee"
			},
			"BINGO_GRID_LINE": {
				"label": "Bingo grid line complete",
				"description": "Actions to execute when you fill a bingo grid's line"
			},
			"BINGO_GRID_ALL": {
				"label": "Bingo grid complete",
				"description": "Actions to execute when you fill an entire bingo grid"
			},
			"BINGO_GRID_CELL": {
				"label": "Bingo grid cell ticked",
				"description": "Actions to execute when yiou tick a bingo grid's cell"
			},
			"BINGO_GRID_RESET": {
				"label": "Bingo grid is reset",
				"description": "Actions to execute when you reset a bingo grid"
			},
			"BINGO_GRID_VIEWER_LINE": {
				"label": "A viewer completed one or more bingo grid lines",
				"description": "Actions to execute when a user fills a bingo grid line"
			},
			"WARN_CHATTER": {
				"label": "Warning sent to a viewer",
				"description": "Actions to execute when a user is sent a warning"
			},
			"WARN_ACKNOWLEDGE": {
				"label": "A user acknowledge warning reception",
				"description": "Actions to execute when a user fills acknowledge the reception of a warning"
			},
			"POWER_UP_MESSAGE": {
				"label": "Power UP: message effect",
				"description": "Actions to execute when a message effect power up is sent"
			},
			"POWER_UP_GIANT_EMOTE": {
				"label": "Power UP: gigantified emote",
				"description": "Actions to execute when a gigantified emote power up is sent"
			},
			"POWER_UP_CELEBRATION": {
				"label": "Power UP: celebration",
				"description": "Actions to execute when a celebration power up is sent"
			},
			"YOUTUBE_SUPER_CHAT": {
				"label": "Super chat received on YouTube",
				"description": "Actions to execute when a user sends a Super Chat on YouTube"
			},
			"YOUTUBE_SUPER_STICKER": {
				"label": "Super sticker received on YouTube",
				"description": "Actions to execute when a user sends a Super Sticker on YouTube"
			},
			"YOUTUBE_SUBSCRIPTION": {
				"label": "Subscription received on YouTube",
				"description": "Actions to execute when a user takes a membership on YouTube"
			},
			"YOUTUBE_SUBGIFT": {
				"label": "Subgifts received on YouTube",
				"description": "Actions to execute when a user gifts memberships on YouTube"
			},
			"WEBSOCKET_TOPIC": {
				"label": "Event received from websocket",
				"description": "Actions to execute when receiving an event from the Websocket {INFO}",
				"description_info": "(NOT OBS-Websocket! Socket message MUST be a JSON with a \"topic\" property)"
			},
			"TILTIFY_TIP": {
				"label": "New donation on a Tiltify campaign",
				"description": "Actions to execute when receiving a donation on a Tiltify campaign"
			},
			"PATREON_NEW_MEMBER": {
				"label": "New member on Patreon",
				"description": "Actions to execute when a new member subscribes on Patreon"
			},
			"TIKTOK_SUB": {
				"label":"TikTok subscriber",
				"description":"A member subscribed on TikTok"
			},
			"TIKTOK_GIFT": {
				"label":"TikTok gift",
				"description":"A viewer sent a gift on TikTok"
			},
			"TIKTOK_LIKE": {
				"label":"Tiktok like",
				"description":"A viewer sent a like on TikTok"
			},
			"TIKTOK_SHARE": {
				"label":"Tiktok share",
				"description":"A viewer shared your TikTok stream"
			},
			"CLEAR_CHAT": {
				"label":"Chat cleared",
				"description": "Actions to execute when the chat is cleared"
			},
			"SUB_ONLY_ON": {
				"label":"Sub-only enabled",
				"description": "Actions to execute when sub-only mode is enabled"
			},
			"SUB_ONLY_OFF": {
				"label":"Sub-only disabled",
				"description": "Actions to execute when sub-only mode is disabled"
			},
			"FOLLOW_ONLY_ON": {
				"label":"Follow-only enabled",
				"description": "Actions to execute when follow-only mode is enabled"
			},
			"FOLLOW_ONLY_OFF": {
				"label":"Follow-only disabled",
				"description": "Actions to execute when follow-only mode is disabled"
			},
			"EMOTE_ONLY_ON": {
				"label":"Emote-only enabled",
				"description": "Actions to execute when emote-only mode is enabled"
			},
			"EMOTE_ONLY_OFF": {
				"label":"Emote-only disabled",
				"description": "Actions to execute when emote-only mode is disabled"
			},
			"SLOW_MODE_ON": {
				"label":"Slow mode enabled",
				"description": "Actions to execute when slow mode is enabled"
			},
			"SLOW_MODE_OFF": {
				"label":"Slow mode disabled",
				"description": "Actions to execute when slow mode is disabled"
			},
			"MONITOR_ON": {
				"label":"User monitored",
				"description": "Actions to execute when a user is monitored"
			},
			"RESTRICT_ON": {
				"label":"User restricted",
				"description": "Actions to execute when a user is restricted from chatting"
			},
			"MONITOR_RESTRICT_OFF": {
				"label":"User not monitored or restricted anymore",
				"description": "Actions to execute when a user stops being monitored or restricted from chatting"
			},
			"PLAYABILITY_INPUT": {
				"label":"Action triggered on PlayAbility",
				"description": "Actions to execute when an action is triggered by PlayAbility"
			}
		},
		"musicEvents": {
			"ADD_TRACK_TO_QUEUE": "Add a track to the queue",
			"ADD_TRACK_TO_PLAYLIST": "Add a track to a playlist",
			"NEXT_TRACK": "Play next track",
			"PAUSE_PLAYBACK": "Pause playback",
			"RESUME_PLAYBACK": "Resume playback",
			"START_PLAYLIST": "Start playlist"
		},
		"scheduleEvents": {
			"NO_ACTION": "Select an action...",
			"REGULAR_REPEAT": "Regular repeat",
			"SPECIFIC_DATES": "Specific dates"
		}
	}
}
